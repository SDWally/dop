将Python编译成c
++++++++++++++++

几种实现方式
-----------

- Cython 编译成ｃ最通用的工具
- numba 专用于numpy代码的新编译器
- pypy　用于非numpy代码的，取代常规Python可执行程序的稳定的即时编译器

编译后不能速度提升的场景
---------------------

- 调用外部库的代码（正则，字符串操作，数据库）
- I/O密集型的程序
-　向量化的numpy例程


常见的速度提升场景
----------------

- 许多循环，重复着多次相同的运算

JIT与AOT的对比
-------------------------

- 提前编译（AOT），创建机器定制的静态库，会获得一个立即拿来使用并解决问题的库。如Cython,Shed Skin,Pythran。
- 即时编译（JIT），让编译器在使用时只逐步编译恰到好处的代码，但会有冷启动问题，不能处理短小且频繁运行的脚本。（numba,pypy）

类型检查使得代码更快运行
--------------------

- 动态类型，一个变量能够引用任何类型的对象，任意代码行都能够改变被引用对象的类型，虚拟机难以在机器码层面优化代码的运行方式。
- python的基础对象，会被更高层次的对象包装
- cpu密集型，往往不需要改变变量类型，这就有机会来做静态编译和加快代码运行。
- 使用机器码和字节来快速运算，要提前决定对象的类型，产生正确的c代码


